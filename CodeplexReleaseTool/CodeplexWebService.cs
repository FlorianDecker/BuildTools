//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace CodeplexReleaseTool
{ // 
  // This source code was auto-generated by wsdl, Version=4.0.30319.1.
  // 

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Web.Services.WebServiceBindingAttribute(Name="ReleaseServiceSoap", Namespace="http://www.codeplex.com/services/ReleaseService/v1.0")]
  public class CodeplexWebService : System.Web.Services.Protocols.SoapHttpClientProtocol, ICodeplexWebService
  {
    
    private System.Threading.SendOrPostCallback CreateProjectReleaseOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateAReleaseOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateReleaseOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateClickOnceReleaseOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateReleaseOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateClickOnceReleaseOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadReleaseFilesOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadTheReleaseFilesOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetReleaseOperationCompleted;
    
    /// <remarks/>
    public CodeplexWebService(string url) {
      this.Url = url;
    }
    
    /// <remarks/>
    public event CreateProjectReleaseCompletedEventHandler CreateProjectReleaseCompleted;
    
    /// <remarks/>
    public event CreateAReleaseCompletedEventHandler CreateAReleaseCompleted;
    
    /// <remarks/>
    public event CreateReleaseCompletedEventHandler CreateReleaseCompleted;
    
    /// <remarks/>
    public event CreateClickOnceReleaseCompletedEventHandler CreateClickOnceReleaseCompleted;
    
    /// <remarks/>
    public event UpdateReleaseCompletedEventHandler UpdateReleaseCompleted;
    
    /// <remarks/>
    public event UpdateClickOnceReleaseCompletedEventHandler UpdateClickOnceReleaseCompleted;
    
    /// <remarks/>
    public event UploadReleaseFilesCompletedEventHandler UploadReleaseFilesCompleted;
    
    /// <remarks/>
    public event UploadTheReleaseFilesCompletedEventHandler UploadTheReleaseFilesCompleted;
    
    /// <remarks/>
    public event GetReleaseCompletedEventHandler GetReleaseCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/CreateProjectRelease", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int CreateProjectRelease(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password, string changesetId) {
      object[] results = this.Invoke("CreateProjectRelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          isDefaultRelease,
          username,
          password,
          changesetId});
      return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateProjectRelease(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password, string changesetId, System.AsyncCallback callback, object asyncState) {
      return this.BeginInvoke("CreateProjectRelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          isDefaultRelease,
          username,
          password,
          changesetId}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndCreateProjectRelease(System.IAsyncResult asyncResult) {
      object[] results = this.EndInvoke(asyncResult);
      return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void CreateProjectReleaseAsync(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password, string changesetId) {
      this.CreateProjectReleaseAsync(projectName, name, description, releaseDate, status, showToPublic, isDefaultRelease, username, password, changesetId, null);
    }
    
    /// <remarks/>
    public void CreateProjectReleaseAsync(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password, string changesetId, object userState) {
      if ((this.CreateProjectReleaseOperationCompleted == null)) {
        this.CreateProjectReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProjectReleaseOperationCompleted);
      }
      this.InvokeAsync("CreateProjectRelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          isDefaultRelease,
          username,
          password,
          changesetId}, this.CreateProjectReleaseOperationCompleted, userState);
    }
    
    private void OnCreateProjectReleaseOperationCompleted(object arg) {
      if ((this.CreateProjectReleaseCompleted != null)) {
        System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
        this.CreateProjectReleaseCompleted(this, new CreateProjectReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/CreateARelease", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int CreateARelease(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password) {
      object[] results = this.Invoke("CreateARelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          isDefaultRelease,
          username,
          password});
      return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateARelease(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password, System.AsyncCallback callback, object asyncState) {
      return this.BeginInvoke("CreateARelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          isDefaultRelease,
          username,
          password}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndCreateARelease(System.IAsyncResult asyncResult) {
      object[] results = this.EndInvoke(asyncResult);
      return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void CreateAReleaseAsync(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password) {
      this.CreateAReleaseAsync(projectName, name, description, releaseDate, status, showToPublic, isDefaultRelease, username, password, null);
    }
    
    /// <remarks/>
    public void CreateAReleaseAsync(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string username, string password, object userState) {
      if ((this.CreateAReleaseOperationCompleted == null)) {
        this.CreateAReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAReleaseOperationCompleted);
      }
      this.InvokeAsync("CreateARelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          isDefaultRelease,
          username,
          password}, this.CreateAReleaseOperationCompleted, userState);
    }
    
    private void OnCreateAReleaseOperationCompleted(object arg) {
      if ((this.CreateAReleaseCompleted != null)) {
        System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
        this.CreateAReleaseCompleted(this, new CreateAReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/CreateRelease", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int CreateRelease(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool showOnHomePage, bool isDefaultRelease, string username, string password) {
      object[] results = this.Invoke("CreateRelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          showOnHomePage,
          isDefaultRelease,
          username,
          password});
      return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateRelease(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool showOnHomePage, bool isDefaultRelease, string username, string password, System.AsyncCallback callback, object asyncState) {
      return this.BeginInvoke("CreateRelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          showOnHomePage,
          isDefaultRelease,
          username,
          password}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndCreateRelease(System.IAsyncResult asyncResult) {
      object[] results = this.EndInvoke(asyncResult);
      return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void CreateReleaseAsync(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool showOnHomePage, bool isDefaultRelease, string username, string password) {
      this.CreateReleaseAsync(projectName, name, description, releaseDate, status, showToPublic, showOnHomePage, isDefaultRelease, username, password, null);
    }
    
    /// <remarks/>
    public void CreateReleaseAsync(string projectName, string name, string description, string releaseDate, string status, bool showToPublic, bool showOnHomePage, bool isDefaultRelease, string username, string password, object userState) {
      if ((this.CreateReleaseOperationCompleted == null)) {
        this.CreateReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateReleaseOperationCompleted);
      }
      this.InvokeAsync("CreateRelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          showOnHomePage,
          isDefaultRelease,
          username,
          password}, this.CreateReleaseOperationCompleted, userState);
    }
    
    private void OnCreateReleaseOperationCompleted(object arg) {
      if ((this.CreateReleaseCompleted != null)) {
        System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
        this.CreateReleaseCompleted(this, new CreateReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/CreateClickOnceRelease", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int CreateClickOnceRelease(string projectName, string name, string description, string releaseDate, string status, bool isDefaultRelease, string changesetId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] clickOnceFileBytes, string username, string password) {
      object[] results = this.Invoke("CreateClickOnceRelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          isDefaultRelease,
          changesetId,
          clickOnceFileBytes,
          username,
          password});
      return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateClickOnceRelease(string projectName, string name, string description, string releaseDate, string status, bool isDefaultRelease, string changesetId, byte[] clickOnceFileBytes, string username, string password, System.AsyncCallback callback, object asyncState) {
      return this.BeginInvoke("CreateClickOnceRelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          isDefaultRelease,
          changesetId,
          clickOnceFileBytes,
          username,
          password}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndCreateClickOnceRelease(System.IAsyncResult asyncResult) {
      object[] results = this.EndInvoke(asyncResult);
      return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void CreateClickOnceReleaseAsync(string projectName, string name, string description, string releaseDate, string status, bool isDefaultRelease, string changesetId, byte[] clickOnceFileBytes, string username, string password) {
      this.CreateClickOnceReleaseAsync(projectName, name, description, releaseDate, status, isDefaultRelease, changesetId, clickOnceFileBytes, username, password, null);
    }
    
    /// <remarks/>
    public void CreateClickOnceReleaseAsync(string projectName, string name, string description, string releaseDate, string status, bool isDefaultRelease, string changesetId, byte[] clickOnceFileBytes, string username, string password, object userState) {
      if ((this.CreateClickOnceReleaseOperationCompleted == null)) {
        this.CreateClickOnceReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateClickOnceReleaseOperationCompleted);
      }
      this.InvokeAsync("CreateClickOnceRelease", new object[] {
          projectName,
          name,
          description,
          releaseDate,
          status,
          isDefaultRelease,
          changesetId,
          clickOnceFileBytes,
          username,
          password}, this.CreateClickOnceReleaseOperationCompleted, userState);
    }
    
    private void OnCreateClickOnceReleaseOperationCompleted(object arg) {
      if ((this.CreateClickOnceReleaseCompleted != null)) {
        System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
        this.CreateClickOnceReleaseCompleted(this, new CreateClickOnceReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/UpdateRelease", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UpdateRelease(string projectName, int releaseId, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string changeSetId, string username, string password) {
      this.Invoke("UpdateRelease", new object[] {
          projectName,
          releaseId,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          isDefaultRelease,
          changeSetId,
          username,
          password});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateRelease(string projectName, int releaseId, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string changeSetId, string username, string password, System.AsyncCallback callback, object asyncState) {
      return this.BeginInvoke("UpdateRelease", new object[] {
          projectName,
          releaseId,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          isDefaultRelease,
          changeSetId,
          username,
          password}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateRelease(System.IAsyncResult asyncResult) {
      this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UpdateReleaseAsync(string projectName, int releaseId, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string changeSetId, string username, string password) {
      this.UpdateReleaseAsync(projectName, releaseId, name, description, releaseDate, status, showToPublic, isDefaultRelease, changeSetId, username, password, null);
    }
    
    /// <remarks/>
    public void UpdateReleaseAsync(string projectName, int releaseId, string name, string description, string releaseDate, string status, bool showToPublic, bool isDefaultRelease, string changeSetId, string username, string password, object userState) {
      if ((this.UpdateReleaseOperationCompleted == null)) {
        this.UpdateReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateReleaseOperationCompleted);
      }
      this.InvokeAsync("UpdateRelease", new object[] {
          projectName,
          releaseId,
          name,
          description,
          releaseDate,
          status,
          showToPublic,
          isDefaultRelease,
          changeSetId,
          username,
          password}, this.UpdateReleaseOperationCompleted, userState);
    }
    
    private void OnUpdateReleaseOperationCompleted(object arg) {
      if ((this.UpdateReleaseCompleted != null)) {
        System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
        this.UpdateReleaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/UpdateClickOnceRelease", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UpdateClickOnceRelease(string projectName, int releaseId, string name, string description, string releaseDate, string status, bool isDefaultRelease, string changeSetId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] clickOnceFileBytes, string username, string password) {
      this.Invoke("UpdateClickOnceRelease", new object[] {
          projectName,
          releaseId,
          name,
          description,
          releaseDate,
          status,
          isDefaultRelease,
          changeSetId,
          clickOnceFileBytes,
          username,
          password});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateClickOnceRelease(string projectName, int releaseId, string name, string description, string releaseDate, string status, bool isDefaultRelease, string changeSetId, byte[] clickOnceFileBytes, string username, string password, System.AsyncCallback callback, object asyncState) {
      return this.BeginInvoke("UpdateClickOnceRelease", new object[] {
          projectName,
          releaseId,
          name,
          description,
          releaseDate,
          status,
          isDefaultRelease,
          changeSetId,
          clickOnceFileBytes,
          username,
          password}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateClickOnceRelease(System.IAsyncResult asyncResult) {
      this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UpdateClickOnceReleaseAsync(string projectName, int releaseId, string name, string description, string releaseDate, string status, bool isDefaultRelease, string changeSetId, byte[] clickOnceFileBytes, string username, string password) {
      this.UpdateClickOnceReleaseAsync(projectName, releaseId, name, description, releaseDate, status, isDefaultRelease, changeSetId, clickOnceFileBytes, username, password, null);
    }
    
    /// <remarks/>
    public void UpdateClickOnceReleaseAsync(string projectName, int releaseId, string name, string description, string releaseDate, string status, bool isDefaultRelease, string changeSetId, byte[] clickOnceFileBytes, string username, string password, object userState) {
      if ((this.UpdateClickOnceReleaseOperationCompleted == null)) {
        this.UpdateClickOnceReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateClickOnceReleaseOperationCompleted);
      }
      this.InvokeAsync("UpdateClickOnceRelease", new object[] {
          projectName,
          releaseId,
          name,
          description,
          releaseDate,
          status,
          isDefaultRelease,
          changeSetId,
          clickOnceFileBytes,
          username,
          password}, this.UpdateClickOnceReleaseOperationCompleted, userState);
    }
    
    private void OnUpdateClickOnceReleaseOperationCompleted(object arg) {
      if ((this.UpdateClickOnceReleaseCompleted != null)) {
        System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
        this.UpdateClickOnceReleaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/UploadReleaseFiles", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UploadReleaseFiles(string projectName, string releaseName, ReleaseFile[] files, string username, string password) {
      this.Invoke("UploadReleaseFiles", new object[] {
          projectName,
          releaseName,
          files,
          username,
          password});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUploadReleaseFiles(string projectName, string releaseName, ReleaseFile[] files, string username, string password, System.AsyncCallback callback, object asyncState) {
      return this.BeginInvoke("UploadReleaseFiles", new object[] {
          projectName,
          releaseName,
          files,
          username,
          password}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUploadReleaseFiles(System.IAsyncResult asyncResult) {
      this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UploadReleaseFilesAsync(string projectName, string releaseName, ReleaseFile[] files, string username, string password) {
      this.UploadReleaseFilesAsync(projectName, releaseName, files, username, password, null);
    }
    
    /// <remarks/>
    public void UploadReleaseFilesAsync(string projectName, string releaseName, ReleaseFile[] files, string username, string password, object userState) {
      if ((this.UploadReleaseFilesOperationCompleted == null)) {
        this.UploadReleaseFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadReleaseFilesOperationCompleted);
      }
      this.InvokeAsync("UploadReleaseFiles", new object[] {
          projectName,
          releaseName,
          files,
          username,
          password}, this.UploadReleaseFilesOperationCompleted, userState);
    }
    
    private void OnUploadReleaseFilesOperationCompleted(object arg) {
      if ((this.UploadReleaseFilesCompleted != null)) {
        System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
        this.UploadReleaseFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/UploadTheReleaseFiles", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UploadTheReleaseFiles(string projectName, string releaseName, ReleaseFile[] files, string recommendedFileName, string username, string password) {
      this.Invoke("UploadTheReleaseFiles", new object[] {
          projectName,
          releaseName,
          files,
          recommendedFileName,
          username,
          password});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUploadTheReleaseFiles(string projectName, string releaseName, ReleaseFile[] files, string recommendedFileName, string username, string password, System.AsyncCallback callback, object asyncState) {
      return this.BeginInvoke("UploadTheReleaseFiles", new object[] {
          projectName,
          releaseName,
          files,
          recommendedFileName,
          username,
          password}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUploadTheReleaseFiles(System.IAsyncResult asyncResult) {
      this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UploadTheReleaseFilesAsync(string projectName, string releaseName, ReleaseFile[] files, string recommendedFileName, string username, string password) {
      this.UploadTheReleaseFilesAsync(projectName, releaseName, files, recommendedFileName, username, password, null);
    }
    
    /// <remarks/>
    public void UploadTheReleaseFilesAsync(string projectName, string releaseName, ReleaseFile[] files, string recommendedFileName, string username, string password, object userState) {
      if ((this.UploadTheReleaseFilesOperationCompleted == null)) {
        this.UploadTheReleaseFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadTheReleaseFilesOperationCompleted);
      }
      this.InvokeAsync("UploadTheReleaseFiles", new object[] {
          projectName,
          releaseName,
          files,
          recommendedFileName,
          username,
          password}, this.UploadTheReleaseFilesOperationCompleted, userState);
    }
    
    private void OnUploadTheReleaseFilesOperationCompleted(object arg) {
      if ((this.UploadTheReleaseFilesCompleted != null)) {
        System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
        this.UploadTheReleaseFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.codeplex.com/services/ReleaseService/v1.0/GetRelease", RequestNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", ResponseNamespace="http://www.codeplex.com/services/ReleaseService/v1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Release GetRelease(string projectName, string releaseName, string username, string password) {
      object[] results = this.Invoke("GetRelease", new object[] {
          projectName,
          releaseName,
          username,
          password});
      return ((Release)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetRelease(string projectName, string releaseName, string username, string password, System.AsyncCallback callback, object asyncState) {
      return this.BeginInvoke("GetRelease", new object[] {
          projectName,
          releaseName,
          username,
          password}, callback, asyncState);
    }
    
    /// <remarks/>
    public Release EndGetRelease(System.IAsyncResult asyncResult) {
      object[] results = this.EndInvoke(asyncResult);
      return ((Release)(results[0]));
    }
    
    /// <remarks/>
    public void GetReleaseAsync(string projectName, string releaseName, string username, string password) {
      this.GetReleaseAsync(projectName, releaseName, username, password, null);
    }
    
    /// <remarks/>
    public void GetReleaseAsync(string projectName, string releaseName, string username, string password, object userState) {
      if ((this.GetReleaseOperationCompleted == null)) {
        this.GetReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReleaseOperationCompleted);
      }
      this.InvokeAsync("GetRelease", new object[] {
          projectName,
          releaseName,
          username,
          password}, this.GetReleaseOperationCompleted, userState);
    }
    
    private void OnGetReleaseOperationCompleted(object arg) {
      if ((this.GetReleaseCompleted != null)) {
        System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
        this.GetReleaseCompleted(this, new GetReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
      }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
      base.CancelAsync(userState);
    }
  }

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.codeplex.com/services/ReleaseService/v1.0")]
  public partial class ReleaseFile {
    
    private byte[] fileDataField;
    
    private string fileNameField;
    
    private string fileTypeField;
    
    private string mimeTypeField;
    
    private string nameField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] FileData {
      get {
        return this.fileDataField;
      }
      set {
        this.fileDataField = value;
      }
    }
    
    /// <remarks/>
    public string FileName {
      get {
        return this.fileNameField;
      }
      set {
        this.fileNameField = value;
      }
    }
    
    /// <remarks/>
    public string FileType {
      get {
        return this.fileTypeField;
      }
      set {
        this.fileTypeField = value;
      }
    }
    
    /// <remarks/>
    public string MimeType {
      get {
        return this.mimeTypeField;
      }
      set {
        this.mimeTypeField = value;
      }
    }
    
    /// <remarks/>
    public string Name {
      get {
        return this.nameField;
      }
      set {
        this.nameField = value;
      }
    }
  }

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  [System.SerializableAttribute()]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.codeplex.com/services/ReleaseService/v1.0")]
  public partial class Release {
    
    private int idField;
    
    private string nameField;
    
    private System.Nullable<System.DateTime> releaseDateField;
    
    private string descriptionField;
    
    private bool showToPublicField;
    
    private bool defaultReleaseField;
    
    private System.Nullable<System.DateTime> modifiedDateField;
    
    private string modifiedByUserNameField;
    
    private string developmentStatusField;
    
    private string changesetIdField;
    
    private bool isClickOnceReleaseField;
    
    private bool isArchivedField;
    
    /// <remarks/>
    public int Id {
      get {
        return this.idField;
      }
      set {
        this.idField = value;
      }
    }
    
    /// <remarks/>
    public string Name {
      get {
        return this.nameField;
      }
      set {
        this.nameField = value;
      }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<System.DateTime> ReleaseDate {
      get {
        return this.releaseDateField;
      }
      set {
        this.releaseDateField = value;
      }
    }
    
    /// <remarks/>
    public string Description {
      get {
        return this.descriptionField;
      }
      set {
        this.descriptionField = value;
      }
    }
    
    /// <remarks/>
    public bool ShowToPublic {
      get {
        return this.showToPublicField;
      }
      set {
        this.showToPublicField = value;
      }
    }
    
    /// <remarks/>
    public bool DefaultRelease {
      get {
        return this.defaultReleaseField;
      }
      set {
        this.defaultReleaseField = value;
      }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Nullable<System.DateTime> ModifiedDate {
      get {
        return this.modifiedDateField;
      }
      set {
        this.modifiedDateField = value;
      }
    }
    
    /// <remarks/>
    public string ModifiedByUserName {
      get {
        return this.modifiedByUserNameField;
      }
      set {
        this.modifiedByUserNameField = value;
      }
    }
    
    /// <remarks/>
    public string DevelopmentStatus {
      get {
        return this.developmentStatusField;
      }
      set {
        this.developmentStatusField = value;
      }
    }
    
    /// <remarks/>
    public string ChangesetId {
      get {
        return this.changesetIdField;
      }
      set {
        this.changesetIdField = value;
      }
    }
    
    /// <remarks/>
    public bool IsClickOnceRelease {
      get {
        return this.isClickOnceReleaseField;
      }
      set {
        this.isClickOnceReleaseField = value;
      }
    }
    
    /// <remarks/>
    public bool IsArchived {
      get {
        return this.isArchivedField;
      }
      set {
        this.isArchivedField = value;
      }
    }
  }

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  public delegate void CreateProjectReleaseCompletedEventHandler(object sender, CreateProjectReleaseCompletedEventArgs e);

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  public partial class CreateProjectReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateProjectReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
        base(exception, cancelled, userState) {
      this.results = results;
        }
    
    /// <remarks/>
    public int Result {
      get {
        this.RaiseExceptionIfNecessary();
        return ((int)(this.results[0]));
      }
    }
  }

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  public delegate void CreateAReleaseCompletedEventHandler(object sender, CreateAReleaseCompletedEventArgs e);

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  public partial class CreateAReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateAReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
        base(exception, cancelled, userState) {
      this.results = results;
        }
    
    /// <remarks/>
    public int Result {
      get {
        this.RaiseExceptionIfNecessary();
        return ((int)(this.results[0]));
      }
    }
  }

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  public delegate void CreateReleaseCompletedEventHandler(object sender, CreateReleaseCompletedEventArgs e);

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  public partial class CreateReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
        base(exception, cancelled, userState) {
      this.results = results;
        }
    
    /// <remarks/>
    public int Result {
      get {
        this.RaiseExceptionIfNecessary();
        return ((int)(this.results[0]));
      }
    }
  }

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  public delegate void CreateClickOnceReleaseCompletedEventHandler(object sender, CreateClickOnceReleaseCompletedEventArgs e);

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  public partial class CreateClickOnceReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateClickOnceReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
        base(exception, cancelled, userState) {
      this.results = results;
        }
    
    /// <remarks/>
    public int Result {
      get {
        this.RaiseExceptionIfNecessary();
        return ((int)(this.results[0]));
      }
    }
  }

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  public delegate void UpdateReleaseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  public delegate void UpdateClickOnceReleaseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  public delegate void UploadReleaseFilesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  public delegate void UploadTheReleaseFilesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  public delegate void GetReleaseCompletedEventHandler(object sender, GetReleaseCompletedEventArgs e);

  /// <remarks/>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.ComponentModel.DesignerCategoryAttribute("code")]
  public partial class GetReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
        base(exception, cancelled, userState) {
      this.results = results;
        }
    
    /// <remarks/>
    public Release Result {
      get {
        this.RaiseExceptionIfNecessary();
        return ((Release)(this.results[0]));
      }
    }
  }
}